function [SSS,SSY,cjy,SSQ]=CosineMI(H0,S,SS,Q,K,k,k0,th,qq)
a=1;
s=1;
K0=zeros(k0,1);
Q0=Q';
A=K(1);
SS0=S;
KS=K;
while(any(K==A)&&size(S,1)>0)
% 第一次计算混合距离
jjk=1;
% MIN=[];

dd2=NHDTWnewest(S,Q0,qq/2);
%找临近序列
KK=zeros(k0,1);
[maxn maxi]=max(dd2);%用于替换，最大值

while (jjk<=k0)
%     jjj=1;%初值
    [minn mini]=min(dd2);%找第一个最小值
    KK(jjk)=mini;%记录对应的行
%     MIN=[MIN,minn]; %记录对应的距离值
    dd2(mini)=maxn;
    jjk=jjk+1;
end
KCC=[];
SSK=zeros(k0,qq);
for iii=1:k0
    SSK(iii,:)=S(KK(iii),:);
end
csum=cosinecjy(SSK,Q0,'lin_kernel',k0);
% [maxkc,maxk]=min(MIN);
pos=[];
if(csum<th)
    for a=1:k0
        if(any(K==KK(a)))
            temp1=find(K==KK(a));
            temp2=S(K(temp1),:);
            for c=1:k
                if(isequal(SS(c,:),temp2))
                    pos=[pos,c];
                end
            end
            SS0(pos,:)=[];
            KS(pos,:)=[];
        end
    end
end   %删去不满足要求的序列

A=KK(end);

K1=K0;
if a==k0||a==1
    K0=KK;
    a=1;
else
    K0=K1; 
end
%挑离中心点最近的点替换中心
if K0(a)<=size(S,1)
Q=S(K0(a),:); %替换中心序列
S(K0(a),:)=[];
a=a+1;
else
    a=a+1;
end
%kc=size(KC,2);
%if kc>kmax
    %break;
%end
end


%KC=intersect(KC,KC); %去掉重复元素

kc=size(KS,1);
Z=zeros(qq,kc);

for n=1:qq
    for nn=1:kc
    Z(n,nn)=SS0(KS(nn),n);%公式（7）
    end
end   %很棒~~

H=zeros(1,kc);
MI=zeros(qq,1);%存储Z序列与H之间的互信息大小，用于比较
%计算互信息MI的大小
for aa=1:kc
%     H(aa)=X(K(aa)+s);
    H(aa)=H0(KS(aa));
end
for a=1:qq
%     MI(a)=mi(Z(a,:)',H'); %调用函数求解MI值
    MI(a)=mi(Z(a,:)',H'); %调用函数求解MI值
end


M=[]; %初始化{}里面的元素
% s0=s;
d=11;
d0=11;
temp=zeros(d0,kc);%用于存储选择出来的参与训练序列对应的序号,不可能大于q
% % MI求解过程中每增加一个Zi要怎么处理，知道求出s个z序列
tem=zeros(d0,1);%用于存储每次选择出来的序列对应的时刻点
Z0=Z;
while(d>0)
    for j=1:d0
    [maxx,maxi]=max(MI);
    tem(j)=maxi;
%     temp(j,:)=Z(maxi,:);
    M=[M Z(maxi,:)']; %每次将选择好的Z序列加进来，也要用于最后训练样本的求取
    Z(maxi,:)=zeros(1,kc);%除去选中的这一行....置零值
    zz=size(Z,1);
%     MI=zeros(zz,1);
    for ii=1:zz
        if MI(ii)==0
            MI(ii)=0;
        else
            MI(ii)=1;
        end
    end
    for i=1:zz
        if i==tem(j)
            MI(i)=0;
        else
            M=[M Z0(i,:)'];
%             cheng=mi(M,H');
            cheng=mi(M,H');
            if MI(i)==1
            MI(i)=cheng;
            end
%     if MI(i)<0
%         break;  %终止条件
        
%     end
             M(:,2)=[];
        end 
%     i=i+1;
    end
    d=d-1;
    end
end
tem=paixu(tem);
for i=1:d0
    temp(i,:)=Z0(tem(i),:);
end

% d=s-s0; %贪婪算法得到的最终的时滞
SSS=zeros(kc,d0);%k为对应的原来Z序列里面每条序列的长度
SSY=zeros(kc,1);
% temp=[1,2]';
%得到s条z序列，也就可以得到对应的预测输入
for b=1:kc
    for bb=1:d0
    SSS(b,bb)=temp(bb,b);
    SSY(b)=H(b); %每条序列对应的预测值
%     bb=bb+1; 
    end
%     b=b+1;%循环一次得到一条目标序列
end

SSQQ=zeros(1,qq);
SSQ=zeros(1,d0);
% Xtt=[X((end-s+2):end);Xt];
% while(C0>0)
for i=1:qq
SSQQ(i)=Q0(i);
end

for i=1:d0
    SSQ(i)=SSQQ(tem(i));%取对应时刻的值
end


% 模型推导！！！
% 根据公式（10）求得变量sai的值，这里用cjy表示好了
% 第二次计算混合距离
mediann=median(SSY); %求取决策维的中位值
mn=size(SSY,1);
ymedian=zeros(mn,1);
for ff=1:mn
    ymedian(ff)=SSY(ff)-mediann;
%     ff=ff+1;
end
ymediann=max(abs(ymedian));%第二个计算因子的分母
cjy1=zeros(k,1);%存放变量第一个计算因子
cjy2=zeros(k,1);%存放变量第二个计算因子
cjy=zeros(k,1);%存放所求变量
for f=1:k
%     cjy1(f)=NH(SSS(f,:),SSQ,(d0-1)/2);
    cjy1(f)=NH(SSS(f,:),SSQ,(d0-1)/2);
    cjy2(f)=abs(SSY(f)-mediann)/ymediann;
    cjy(f)=exp((-1/2)*(cjy1(f)+cjy2(f)));
end